import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { providers, Contract } from "ethers";
import Web3Modal from "web3modal";
import { useState, useEffect, useRef } from "react";
import LimeNFT from "../utils/LimeNFT.json";

export default function Home() {
  const web3ModalRef = useRef();
  const contractABI = LimeNFT.abi;
  const [loading, setLoading] = useState(false);
  const [currentAccount, setCurrentAccount] = useState("");
  const [walletConnected, setWalletConnected] = useState(false);
  const [link, setLink] = useState("");

  // Constants
  const TWITTER_HANDLE = "_moonplant";
  const TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;
  const OPENSEA_LINK = "https://testnets.opensea.io/assets/rinkeby/";
  const TOTAL_MINT_COUNT = 50;

  // Web3Modal to get Provider or Signer
  const getProviderOrSigner = async (needSigner = false) => {
    // Connect to Metamask
    // Since we store `web3Modal` as a reference, we need to access the `current` value to get access to the underlying object
    const provider = await web3ModalRef.current.connect();
    const web3Provider = new providers.Web3Provider(provider);

    // If user is not connected to the Rinkeby network, let them know and throw an error
    const { chainId } = await web3Provider.getNetwork();
    if (chainId !== 4) {
      window.alert("Change the network to Rinkeby");
      throw new Error("Change network to Rinkeby");
    }

    if (needSigner) {
      const signer = web3Provider.getSigner();
      return signer;
    }
    return web3Provider;
  };

  const connectWallet = async () => {
    try {
      const txn = await getProviderOrSigner();
      setCurrentAccount(txn.provider.selectedAddress);
      setWalletConnected(true);
    } catch (err) {
      console.log(err);
    }
  };

  const askContractToMintNft = async () => {
    const CONTRACT_ADDRESS = "0x17d0b1b611D575A8F3883C1b8D0Bec4657c7F467";

    try {
      const signer = await getProviderOrSigner(true);
      const connectedContract = new Contract(
        CONTRACT_ADDRESS,
        contractABI,
        signer
      );

      connectedContract.on("NewEpicNFTMinted", (from, tokenId) => {
        console.log(from, tokenId.toNumber());
        setLink(`${OPENSEA_LINK}${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);
      });

      console.log("Going to pop wallet now to pay gas...");
      let nftTxn = await connectedContract.makeAnEpicNFT();

      console.log("Mining...please wait.");
      setLoading(true);
      await nftTxn.wait();
      setLoading(false);
      console.log(
        `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`
      );
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    // Functions - Connect Wallet when user lands on page
    if (!walletConnected) {
      web3ModalRef.current = new Web3Modal({
        network: "rinkeby",
        providerOptions: {},
        disableInjectedProvider: false,
      });

      connectWallet();
    }
  }, [walletConnected]);

  const renderButton = () => {
    if (!walletConnected) {
      return <button onClick={connectWallet}>Connect your wallet</button>;
    } else {
      return <h1>Connected</h1>;
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className="App">
          <div className="container">
            <div className="header-container">
              <p className="header gradient-text">My NFT Collection</p>
              <p className="sub-text">
                Each unique. Each beautiful. Discover your NFT today.
              </p>
              {currentAccount === "" ? (
                renderButton()
              ) : (
                /** Add askContractToMintNft Action for the onClick event **/
                <>
                  <pre>{currentAccount}</pre>
                  <button
                    onClick={askContractToMintNft}
                    className="cta-button connect-wallet-button"
                  >
                    Mint NFT
                  </button>
                  {loading && <h6>loading...</h6>}
                  {!loading && link !== "" && (
                    <div>
                      <a href={link}>{link}</a>
                    </div>
                  )}
                </>
              )}
            </div>
            <div className="footer-container">
              <a
                className="footer-text"
                href={TWITTER_LINK}
                target="_blank"
                rel="noreferrer"
              >{`built on @${TWITTER_HANDLE}`}</a>
            </div>
          </div>
        </div>
      </main>
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
